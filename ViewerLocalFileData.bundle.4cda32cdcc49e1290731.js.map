{"version":3,"sources":["webpack:///./connectedComponents/ViewerLocalFileData.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["OHIFStudyMetadata","metadata","studyMetadataManager","utils","updateMetaDataManager","dropZoneLinkDialog","onDrop","i18n","dir","noDrag","getRootProps","getInputProps","className","webkitdirectory","mozdirectory","ViewerLocalFileData","studies","loading","error","purge","updatedStudies","map","study","studyMetadata","studyInstanceUid","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","setDisplaySets","forEachDisplaySet","displayset","localFile","add","setState","acceptedFiles","filesToStudies","updateStudies","this","state","JSON","stringify","noClick","style","width","height","studyInstanceUids","a","props","t","linksDialogMessage","Component","PropTypes","array","withTranslation","FileLoader","file","imageId","image","dataset","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","studyDate","studyTime","accessionNumber","referringPhysicianName","patientName","patientId","patientBirthdate","patientSex","studyId","studyDescription","seriesList","seriesInstanceUid","seriesDescription","seriesNumber","instances","sopInstanceUid","sopClassUid","rows","columns","numberOfFrames","instanceNumber","getImageId","isLocalFile","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","_meta","namifyDataset","meta","e","console","getStudyFromDataset","StudyInstanceUID","StudyDate","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientID","PatientBirthDate","PatientSex","StudyID","StudyDescription","SeriesInstanceUID","SeriesDescription","SeriesNumber","SOPInstanceUID","SOPClassUID","Rows","Columns","NumberOfFrames","InstanceNumber","Modality","instance","url","modality","series","FileLoaderService","fileType","type","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","reduce","acc","obj","key","push","Object","values","studyGroup","seriesGrouped","fileManager","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","log","name","message","files","processFilesPromises","Promise","all","groupSeries","flat"],"mappings":"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","file":"ViewerLocalFileData.bundle.4cda32cdcc49e1290731.js","sourcesContent":["import React, { Component } from 'react';\nimport { metadata, utils } from '@ohif/core';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nimport Dropzone from 'react-dropzone';\nimport filesToStudies from '../lib/filesToStudies';\nimport './ViewerLocalFileData.css';\nimport { withTranslation } from 'react-i18next';\n\nconst { OHIFStudyMetadata } = metadata;\nconst { studyMetadataManager, updateMetaDataManager } = utils;\n\nconst dropZoneLinkDialog = (onDrop, i18n, dir) => {\n  return (\n    <Dropzone onDrop={onDrop} noDrag>\n      {({ getRootProps, getInputProps }) => (\n        <span {...getRootProps()} className=\"link-dialog\">\n          {dir ? (\n            <span>\n              {i18n('Load folders')}\n              <input\n                {...getInputProps()}\n                webkitdirectory=\"true\"\n                mozdirectory=\"true\"\n              />\n            </span>\n          ) : (\n              <span>\n                {i18n('Load files')}\n                <input {...getInputProps()} />\n              </span>\n            )}\n        </span>\n      )}\n    </Dropzone>\n  );\n};\n\nconst linksDialogMessage = (onDrop, i18n) => {\n  return (\n    <>\n      {i18n('Or click to ')}\n      {dropZoneLinkDialog(onDrop, i18n)}\n      {i18n(' or ')}\n      {dropZoneLinkDialog(onDrop, i18n, true)}\n      {i18n(' from dialog')}\n    </>\n  );\n};\n\nclass ViewerLocalFileData extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n  };\n\n  state = {\n    studies: null,\n    loading: false,\n    error: null,\n  };\n\n  updateStudies = studies => {\n    // Render the viewer when the data is ready\n    studyMetadataManager.purge();\n\n    // Map studies to new format, update metadata manager?\n    const updatedStudies = studies.map(study => {\n      const studyMetadata = new OHIFStudyMetadata(\n        study,\n        study.studyInstanceUid\n      );\n      const sopClassHandlerModules =\n        extensionManager.modules['sopClassHandlerModule'];\n\n      study.displaySets =\n        study.displaySets ||\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\n      studyMetadata.setDisplaySets(study.displaySets);\n\n      studyMetadata.forEachDisplaySet(displayset => {\n        displayset.localFile = true;\n      });\n      // Updates WADO-RS metaDataManager\n      updateMetaDataManager(study);\n\n      studyMetadataManager.add(studyMetadata);\n\n      return study;\n    });\n\n    this.setState({\n      studies: updatedStudies,\n    });\n  };\n\n  render() {\n    const onDrop = async acceptedFiles => {\n      this.setState({ loading: true });\n\n      const studies = await filesToStudies(acceptedFiles);\n      const updatedStudies = this.updateStudies(studies);\n\n      if (!updatedStudies) {\n        return;\n      }\n\n      this.setState({ studies: updatedStudies, loading: false });\n    };\n\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    }\n\n    return (\n      <Dropzone onDrop={onDrop} noClick>\n        {({ getRootProps, getInputProps }) => (\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\n            {this.state.studies ? (\n              <ConnectedViewer\n                studies={this.state.studies}\n                studyInstanceUids={\n                  this.state.studies &&\n                  this.state.studies.map(a => a.studyInstanceUid)\n                }\n              />\n            ) : (\n                <div className={'drag-drop-instructions'}>\n                  <div className={'drag-drop-contents'}>\n                    {this.state.loading ? (\n                      <h3>{this.props.t('Carregando...')}</h3>\n                    ) : (\n                        <>\n                          <h3>\n                            {this.props.t(\n                              'Drag and Drop DICOM files here to load them in the Viewer'\n                            )}\n                          </h3>\n                          <h4>{linksDialogMessage(onDrop, this.props.t)}</h4>\n                        </>\n                      )}\n                  </div>\n                </div>\n              )}\n          </div>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nexport default withTranslation('Common')(ViewerLocalFileData);\n","export default class FileLoader {\n  fileType;\n  loadFile(file, imageId) { }\n  getDataset(image, imageId) { }\n  getStudies(dataset, imageId) { }\n}\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst PDFFileLoader = new (class extends FileLoader {\n  fileType = 'application/pdf';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    const dataset = {};\n    dataset.imageId = image.imageId || imageId;\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getDefaultStudy(imageId);\n  }\n\n  getDefaultStudy(imageId) {\n    const study = {\n      studyInstanceUid: '',\n      studyDate: '',\n      studyTime: '',\n      accessionNumber: '',\n      referringPhysicianName: '',\n      patientName: '',\n      patientId: '',\n      patientBirthdate: '',\n      patientSex: '',\n      studyId: '',\n      studyDescription: '',\n      seriesList: [\n        {\n          seriesInstanceUid: '',\n          seriesDescription: '',\n          seriesNumber: '',\n          instances: [\n            {\n              sopInstanceUid: '',\n              sopClassUid: '1.2.840.10008.5.1.4.1.1.104.1',\n              rows: '',\n              columns: '',\n              numberOfFrames: 0,\n              instanceNumber: 1,\n              getImageId: () => imageId,\n              isLocalFile: true,\n            },\n          ],\n        },\n      ],\n    };\n\n    return study;\n  }\n})();\n\nexport default PDFFileLoader;\n","import * as dcmjs from 'dcmjs';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst DICOMFileLoader = new (class extends FileLoader {\n  fileType = 'application/dicom';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    let dataset = {};\n    try {\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n    } catch (e) {\n      console.error('Error reading dicom file', e);\n    }\n    // Set imageId on dataset to be consumed later on\n    dataset.imageId = imageId;\n\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getStudyFromDataset(dataset);\n  }\n\n  getStudyFromDataset(dataset = {}) {\n    const {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      /*\n      NumberOfStudyRelatedSeries,\n      NumberOfStudyRelatedInstances,\n      Modality,\n      ModalitiesInStudy,\n      */\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesNumber,\n      SOPInstanceUID,\n      SOPClassUID,\n      Rows,\n      Columns,\n      NumberOfFrames,\n      InstanceNumber,\n      imageId,\n      Modality,\n      /*ImageType,\n        InstanceNumber,\n        ImagePositionPatient,\n        ImageOrientationPatient,\n        FrameOfReferenceUID,\n        SliceLocation,\n        SamplesPerPixel,\n        PhotometricInterpretation,\n        PlanarConfiguration,\n        PixelSpacing,\n        PixelAspectRatio,\n        BitsAllocated,\n        BitsStored,\n        HighBit,\n        PixelRepresentation,\n        SmallestPixelValue,\n        LargestPixelValue,\n        WindowCenter,\n        WindowWidth,\n        RescaleIntercept,\n        RescaleSlope,\n        RescaleType,\n        Laterality,\n        ViewPosition,\n        AcquisitionDateTime,\n        FrameIncrementPointer,\n        FrameTime,\n        FrameTimeVector,\n        SliceThickness,\n        SpacingBetweenSlices,\n        LossyImageCompression,\n        DerivationDescription,\n        LossyImageCompressionRatio,\n        LossyImageCompressionMethod,\n        EchoNumber,\n        ContrastBolusAgent,\n        */\n    } = dataset;\n\n    const instance = {\n      sopInstanceUid: SOPInstanceUID,\n      sopClassUid: SOPClassUID,\n      rows: Rows,\n      columns: Columns,\n      numberOfFrames: NumberOfFrames,\n      instanceNumber: InstanceNumber,\n      url: imageId,\n      modality: Modality,\n      /*\n        TODO: in case necessary to uncoment this block, double check every property\n        imageType: ImageType || DICOMWeb.getString(dataset['00080008']),\n        instanceNumber: InstanceNumber || DICOMWeb.getNumber(dataset['00200013']),\n        imagePositionPatient: ImagePositionPatient || DICOMWeb.getString(dataset['00200032']),\n        imageOrientationPatient: ImageOrientationPatient || DICOMWeb.getString(dataset['00200037']),\n        frameOfReferenceUID: FrameOfReferenceUID || DICOMWeb.getString(dataset['00200052']),\n        sliceLocation: SliceLocation || DICOMWeb.getNumber(dataset['00201041']),\n        samplesPerPixel: SamplesPerPixel || DICOMWeb.getNumber(dataset['00280002']),\n        photometricInterpretation: PhotometricInterpretation || DICOMWeb.getString(dataset['00280004']),\n        planarConfiguration: PlanarConfiguration || DICOMWeb.getNumber(dataset['00280006']),\n        pixelSpacing: PixelSpacing || DICOMWeb.getString(dataset['00280030']),\n        pixelAspectRatio: PixelAspectRatio || DICOMWeb.getString(dataset['00280034']),\n        bitsAllocated: BitsAllocated || DICOMWeb.getNumber(dataset['00280100']),\n        bitsStored: BitsStored || DICOMWeb.getNumber(dataset['00280101']),\n        highBit: HighBit || DICOMWeb.getNumber(dataset['00280102']),\n        pixelRepresentation: PixelRepresentation || DICOMWeb.getNumber(dataset['00280103']),\n        smallestPixelValue: SmallestPixelValue || DICOMWeb.getNumber(dataset['00280106']),\n        largestPixelValue: LargestPixelValue || DICOMWeb.getNumber(dataset['00280107']),\n        windowCenter: WindowCenter || DICOMWeb.getString(dataset['00281050']),\n        windowWidth: WindowWidth || DICOMWeb.getString(dataset['00281051']),\n        rescaleIntercept: RescaleIntercept || DICOMWeb.getNumber(dataset['00281052']),\n        rescaleSlope: RescaleSlope || DICOMWeb.getNumber(dataset['00281053']),\n        rescaleType: RescaleType || DICOMWeb.getNumber(dataset['00281054']),\n        sourceImageInstanceUid: getSourceImageInstanceUid(dataset),\n        laterality: Laterality || DICOMWeb.getString(dataset['00200062']),\n        viewPosition: ViewPosition || DICOMWeb.getString(dataset['00185101']),\n        acquisitionDateTime: AcquisitionDateTime || DICOMWeb.getString(dataset['0008002A']),\n        frameIncrementPointer: FrameIncrementPointer || getFrameIncrementPointer(dataset['00280009']),\n        frameTime: FrameTime || DICOMWeb.getNumber(dataset['00181063']),\n        frameTimeVector: FrameTimeVector || parseFloatArray(\n          DICOMWeb.getString(dataset['00181065'])\n        ),\n        sliceThickness: SliceThickness || DICOMWeb.getNumber(dataset['00180050']),\n        spacingBetweenSlices: SpacingBetweenSlices || DICOMWeb.getString(dataset['00180088']),\n        lossyImageCompression: LossyImageCompression || DICOMWeb.getString(dataset['00282110']),\n        derivationDescription: DerivationDescription || DICOMWeb.getString(dataset['00282111']),\n        lossyImageCompressionRatio: LossyImageCompressionRatio || DICOMWeb.getString(dataset['00282112']),\n        lossyImageCompressionMethod: LossyImageCompressionMethod || DICOMWeb.getString(dataset['00282114']),\n        echoNumber: EchoNumber || DICOMWeb.getString(dataset['00180086']),\n        contrastBolusAgent: ContrastBolusAgent || DICOMWeb.getString(dataset['00180010']),\n        radiopharmaceuticalInfo: getRadiopharmaceuticalInfo(dataset),\n        wadouri: WADOProxy.convertURL(wadouri, server),\n        wadorsuri: WADOProxy.convertURL(wadorsuri, server),*/\n    };\n\n    const series = {\n      seriesInstanceUid: SeriesInstanceUID,\n      seriesDescription: SeriesDescription,\n      seriesNumber: SeriesNumber,\n      instances: [instance],\n    };\n\n    const study = {\n      studyInstanceUid: StudyInstanceUID,\n      studyDate: StudyDate,\n      studyTime: StudyTime,\n      accessionNumber: AccessionNumber,\n      referringPhysicianName: ReferringPhysicianName,\n      patientName: PatientName,\n      patientId: PatientID,\n      patientBirthdate: PatientBirthDate,\n      patientSex: PatientSex,\n      studyId: StudyID,\n      studyDescription: StudyDescription,\n      /*\n      TODO: in case necessary to uncomment this block, double check every property\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\n      modality: Modality || DICOMWeb.getString(dataset['00080060']),\n      modalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\n      modalities:\n      */\n      seriesList: [series],\n    };\n\n    return study;\n  }\n})();\n\nexport default DICOMFileLoader;\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport PDFFileLoader from './pdfFileLoader';\nimport DICOMFileLoader from './dicomFileLoader';\n\nclass FileLoaderService extends FileLoader {\n  fileType;\n  loader;\n  constructor(file) {\n    super();\n    const fileType = file && file.type;\n    this.loader = this.getLoader(fileType);\n    this.fileType = this.loader.fileType;\n  }\n\n  static groupSeries(studies) {\n    const groupBy = (list, groupByKey, listKey) => {\n      let nonKeyCounter = 1;\n\n      return list.reduce((acc, obj) => {\n        let key = obj[groupByKey];\n        const list = obj[listKey];\n\n        // in case key not found, group it using counter\n        key = !!key ? key : '' + nonKeyCounter++;\n\n        if (!acc[key]) {\n          acc[key] = { ...obj };\n          acc[key][listKey] = [];\n        }\n\n        acc[key][listKey].push(...list);\n\n        return acc;\n      }, {});\n    };\n\n    const studiesGrouped = Object.values(\n      groupBy(studies, 'studyInstanceUid', 'seriesList')\n    );\n\n    const result = studiesGrouped.map(studyGroup => {\n      const seriesGrouped = groupBy(\n        studyGroup.seriesList,\n        'seriesInstanceUid',\n        'instances'\n      );\n      studyGroup.seriesList = Object.values(seriesGrouped);\n\n      return studyGroup;\n    });\n\n    return result;\n  }\n\n  addFile(file) {\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\n  }\n\n  loadFile(file, imageId) {\n    return this.loader.loadFile(file, imageId);\n  }\n\n  getDataset(image, imageId) {\n    return this.loader.getDataset(image, imageId);\n  }\n\n  getStudies(dataset, imageId) {\n    return this.loader.getStudies(dataset, imageId);\n  }\n\n  getLoader(fileType) {\n    if (fileType === 'application/pdf') {\n      return PDFFileLoader;\n    } else {\n      // Default to dicom loader\n      return DICOMFileLoader;\n    }\n  }\n}\n\nexport default FileLoaderService;\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\n\nconst processFile = async file => {\n  try {\n    const fileLoaderService = new FileLoaderService(file);\n    const imageId = fileLoaderService.addFile(file);\n    const image = await fileLoaderService.loadFile(file, imageId);\n    const dataset = await fileLoaderService.getDataset(image, imageId);\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\n\n    return studies;\n  } catch (error) {\n    console.log(\n      error.name,\n      ':Error when trying to load and process local files:',\n      error.message\n    );\n  }\n};\n\nexport default async function filesToStudies(files) {\n  const processFilesPromises = files.map(processFile);\n  const studies = await Promise.all(processFilesPromises);\n\n  return FileLoaderService.groupSeries(studies.flat());\n}\n"],"sourceRoot":""}