{"version":3,"sources":["webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js"],"names":["scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","toolbarButtons","activeButtons","_handleBuiltIn","bind","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","buttonGroups","left","value","icon","bottomLabel","t","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","activeContexts","some","actx","includes","menuOptionEntry","target","label","prevProps","this","setState","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","options","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","button","CustomComponent","activeButtonsIds","map","id","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","filter","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","dialog","modal","dialogId","behavior","dismiss","document","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","studies","array","withTranslation","withModal","withDialog","ConnectedToolbarRow","getActiveContexts","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","loading","progress","studiesWithLoadingData","study","thumbnails","displaySetInstanceUid","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","studyMetadata","displaySets","find","ds","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","studyInstanceUid","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","rowSize","colSize","ViewportPanes","pluginName","ViewportComponent","Error","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","ConnectedViewportGrid","availableViewportModules","viewportModules","VIEWPORT","moduleDefinition","extensionId","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","values","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","fromSideClass","styles","maxWidth","marginRight","isOpen","Number","parseInt","Viewer","log","info","earliestDate","Date","toISOString","latestDate","studyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUids","patientId","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","dismissAll","isStudyLoaded","timepointApi","measurementApi","currentTimepointId","_mapStudiesToThumbnails","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabellingContext","Consumer","whiteLabelling","UserManagerContext","userManager","ConnectedHeader","home","logoComponent","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","shape","wadoRoot","imageId","altImageText","seriesDescription","seriesNumber","instanceNumber","numImageFrames","modality","images","imageIndex","Math","floor","getImageId","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer"],"mappings":"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","file":"ConnectedStandaloneRouting~IHEInvokeImageDisplay~ViewerLocalFileData~ViewerRouting.bundle.2889d6e30abacde572a9.js","sourcesContent":["import { connect } from 'react-redux';\nimport { CineDialog } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport csTools from 'cornerstone-tools';\nimport { commandsManager } from './../App.js';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n","import { LayoutButton } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\n\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\n      const viewports = [];\n      const numRows = selectedCell.row + 1;\n      const numColumns = selectedCell.col + 1;\n      const numViewports = numRows * numColumns;\n\n      for (let i = 0; i < numViewports; i++) {\n        // Hacky way to allow users to exit MPR \"mode\"\n        const viewport = currentLayout.viewports[i];\n        let plugin = viewport && viewport.plugin;\n        if (viewport && viewport.vtk) {\n          plugin = 'cornerstone';\n        }\n\n        viewports.push({\n          plugin,\n        });\n      }\n      const layout = {\n        numRows,\n        numColumns,\n        viewports,\n      };\n\n      const maxActiveIndex = numViewports - 1;\n      if (activeViewportIndex > maxActiveIndex) {\n        dispatch(setViewportActive(0));\n      }\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch) => {\n  const onChangeFromDispatch = propsFromDispatch.onChange;\n  const { currentLayout, activeViewportIndex } = propsFromState;\n\n  return {\n    onChange: selectedCell =>\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\n\nimport { MODULE_TYPES } from '@ohif/core';\nimport {\n  ExpandableToolMenu,\n  RoundedButtonGroup,\n  ToolbarButton,\n  withModal,\n  withDialog,\n} from '@ohif/ui';\n\nimport './ToolbarRow.css';\nimport { commandsManager, extensionManager } from './../App.js';\n\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\n\nclass ToolbarRow extends Component {\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\n  // closed if selected is null/undefined\n  static propTypes = {\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\n    selectedLeftSidePanel: PropTypes.string.isRequired,\n    selectedRightSidePanel: PropTypes.string.isRequired,\n    handleSidePanelChange: PropTypes.func,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n    studies: PropTypes.array,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n    // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n    };\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\n    this.buttonGroups = {\n      left: [\n        // TODO: This should come from extensions, instead of being baked in\n        {\n          value: 'studies',\n          icon: 'th-large',\n          bottomLabel: this.props.t('Series'),\n        },\n      ],\n      right: [],\n    };\n\n    panelModules.forEach(panelExtension => {\n      const panelModule = panelExtension.module;\n      const defaultContexts = Array.from(panelModule.defaultContext);\n\n      // MENU OPTIONS\n      panelModule.menuOptions.forEach(menuOption => {\n        const contexts = Array.from(menuOption.context || defaultContexts);\n\n        const activeContextIncludesAnyPanelContexts = this.props.activeContexts.some(\n          actx => contexts.includes(actx)\n        );\n        if (activeContextIncludesAnyPanelContexts) {\n          const menuOptionEntry = {\n            value: menuOption.target,\n            icon: menuOption.icon,\n            bottomLabel: menuOption.label,\n          };\n          const from = menuOption.from || 'right';\n\n          this.buttonGroups[from].push(menuOptionEntry);\n        }\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    if (activeContextsChanged) {\n      this.setState({\n        toolbarButtons: _getVisibleToolbarButtons.call(this),\n      });\n    }\n  }\n\n  render() {\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const onPress = (side, value) => {\n      this.props.handleSidePanelChange(side, value);\n    };\n    const onPressLeft = onPress.bind(this, 'left');\n    const onPressRight = onPress.bind(this, 'right');\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\n            <RoundedButtonGroup\n              options={this.buttonGroups.left}\n              value={this.props.selectedLeftSidePanel || ''}\n              onValueChanged={onPressLeft}\n            />\n          </div>\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            {this.buttonGroups.right.length && (\n              <RoundedButtonGroup\n                options={this.buttonGroups.right}\n                value={this.props.selectedRightSidePanel || ''}\n                onValueChanged={onPressRight}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction _getCustomButtonComponent(button, activeButtons) {\n  const CustomComponent = button.CustomComponent;\n  const isValidComponent = typeof CustomComponent === 'function';\n\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\n  if (isValidComponent) {\n    const parentContext = this;\n    const activeButtonsIds = activeButtons.map(button => button.id);\n    const isActive = activeButtonsIds.includes(button.id);\n\n    return (\n      <CustomComponent\n        parentContext={parentContext}\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\n        button={button}\n        key={button.id}\n        activeButtons={activeButtonsIds}\n        isActive={isActive}\n      />\n    );\n  }\n}\n\nfunction _getExpandableButtonComponent(button, activeButtons) {\n  // Iterate over button definitions and update `onClick` behavior\n  let activeCommand;\n  const childButtons = button.buttons.map(childButton => {\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\n\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\n      activeCommand = childButton.id;\n    }\n\n    return childButton;\n  });\n\n  return (\n    <ExpandableToolMenu\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      buttons={childButtons}\n      activeCommand={activeCommand}\n    />\n  );\n}\n\nfunction _getDefaultButtonComponent(button, activeButtons) {\n  return (\n    <ToolbarButton\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      onClick={_handleToolbarButtonClick.bind(this, button)}\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\n    />\n  );\n}\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  const _this = this;\n  return toolbarButtons.map(button => {\n    const hasCustomComponent = button.CustomComponent;\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\n\n    if (hasCustomComponent) {\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\n    }\n\n    if (hasNestedButtonDefinitions) {\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\n    }\n\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\n  });\n}\n\n/**\n * A handy way for us to handle different button types. IE. firing commands for\n * buttons, or initiation built in behavior.\n *\n * @param {*} button\n * @param {*} evt\n * @param {*} props\n */\nfunction _handleToolbarButtonClick(button, evt, props) {\n  const { activeButtons } = this.state;\n\n  if (button.commandName) {\n    const options = Object.assign({ evt }, button.commandOptions);\n    commandsManager.runCommand(button.commandName, options);\n  }\n\n  // TODO: Use Types ENUM\n  // TODO: We can update this to be a `getter` on the extension to query\n  //       For the active tools after we apply our updates?\n  if (button.type === 'setToolActive') {\n    const toggables = activeButtons.filter(\n      ({ options }) => options && !options.togglable\n    );\n    this.setState({ activeButtons: [...toggables, button] });\n  } else if (button.type === 'builtIn') {\n    this._handleBuiltIn(button);\n  }\n}\n\n/**\n *\n */\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn(button) {\n  /* TODO: Keep cine button active until its unselected. */\n  const { dialog, modal, t } = this.props;\n  const { dialogId } = this.state;\n  const { id, options } = button;\n\n  if (options.behavior === 'CINE') {\n    if (dialogId) {\n      dialog.dismiss({ id: dialogId });\n      this.setState(state => ({\n        dialogId: null,\n        activeButtons: [\n          ...state.activeButtons.filter(button => button.id !== id),\n        ],\n      }));\n    } else {\n      const spacing = 20;\n      const { x, y } = document\n        .querySelector(`.ViewerMain`)\n        .getBoundingClientRect();\n      const newDialogId = dialog.create({\n        content: ConnectedCineDialog,\n        defaultPosition: {\n          x: x + spacing || 0,\n          y: y + spacing || 0,\n        },\n      });\n      this.setState(state => ({\n        dialogId: newDialogId,\n        activeButtons: [...state.activeButtons, button],\n      }));\n    }\n  }\n\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\n    commandsManager.runCommand('showDownloadViewportModal', {\n      title: t('Download de imagem de alta qualidade'),\n    });\n  }\n}\n\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\n  withModal(withDialog(ToolbarRow))\n);\n","// TODO: REPLACE THIS WITH A CONTEXT PROVIDER\n// EVERYTHING IN `VIEWER.JS` COULD USE THIS FOR APPROPRIATE CONTEXT\nimport ToolbarRow from './ToolbarRow';\nimport { connect } from 'react-redux';\nimport { getActiveContexts } from './../store/layout/selectors.js';\n\nconst mapStateToProps = state => {\n  return {\n    activeContexts: getActiveContexts(state),\n  };\n};\n\nconst ConnectedToolbarRow = connect(mapStateToProps)(ToolbarRow);\n\nexport default ConnectedToolbarRow;\n","import OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { StudyBrowser } from '@ohif/ui';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\n\n// TODO\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\n// - Pass in errors and stack loading progress from Redux\nconst mapStateToProps = (state, ownProps) => {\n  // If we know that the stack loading progress details have changed,\n  // we can try to update the component state so that the thumbnail\n  // progress bar is updated\n  const stackLoadingProgressMap = state.loading.progress;\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\n\n  studiesWithLoadingData.forEach(study => {\n    study.thumbnails.forEach(data => {\n      const { displaySetInstanceUid } = data;\n      const stackId = `StackProgress:${displaySetInstanceUid}`;\n      const stackProgressData = stackLoadingProgressMap[stackId];\n\n      let stackPercentComplete = 0;\n      if (stackProgressData) {\n        stackPercentComplete = stackProgressData.percentComplete;\n      }\n\n      data.stackPercentComplete = stackPercentComplete;\n    });\n  });\n\n  return {\n    studies: studiesWithLoadingData,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onThumbnailClick: displaySetInstanceUid => {\n      const displaySet = ownProps.studyMetadata[0].displaySets.find(\n        ds => ds.displaySetInstanceUid === displaySetInstanceUid\n      );\n\n      dispatch(setActiveViewportSpecificData(displaySet));\n    },\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './ViewportPane.css';\n\nconst ViewportPane = function(props) {\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\n  const [{ hovered, highlighted }, drop] = useDrop({\n    accept: 'thumbnail',\n    drop: (droppedItem, monitor) => {\n      const canDrop = monitor.canDrop();\n      const isOver = monitor.isOver();\n\n      if (canDrop && isOver && onDrop) {\n        const { studyInstanceUid, displaySetInstanceUid } = droppedItem;\n\n        onDrop({ viewportIndex, studyInstanceUid, displaySetInstanceUid });\n      }\n    },\n    // Monitor, and collect props.\n    // Returned as values by `useDrop`\n    collect: monitor => ({\n      highlighted: monitor.canDrop(),\n      hovered: monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div\n      className={classNames(\n        'viewport-drop-target',\n        { hovered: hovered },\n        { highlighted: highlighted },\n        propClassName\n      )}\n      ref={drop}\n      data-cy={`viewport-container-${viewportIndex}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nViewportPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  onDrop: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default ViewportPane;\n","import './ViewportGrid.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n//\nimport ViewportPane from './ViewportPane.js';\nimport DefaultViewport from './DefaultViewport.js';\nimport EmptyViewport from './EmptyViewport.js';\n\nconst ViewportGrid = function(props) {\n  const {\n    activeViewportIndex,\n    availablePlugins,\n    defaultPlugin: defaultPluginName,\n    layout,\n    numRows,\n    numColumns,\n    setViewportData,\n    studies,\n    viewportData,\n    children,\n  } = props;\n\n  const rowSize = 100 / numRows;\n  const colSize = 100 / numColumns;\n\n  // http://grid.malven.co/\n  if (!viewportData || !viewportData.length) {\n    return null;\n  }\n\n  const ViewportPanes = layout.viewports.map((layout, viewportIndex) => {\n    const displaySet = viewportData[viewportIndex];\n\n    if (!displaySet) {\n      return null;\n    }\n\n    const data = {\n      displaySet,\n      studies,\n    };\n\n    // Use whichever plugin is currently in use in the panel\n    // unless nothing is specified. If nothing is specified\n    // and the display set has a plugin specified, use that.\n    //\n    // TODO: Change this logic to:\n    // - Plugins define how capable they are of displaying a SopClass\n    // - When updating a panel, ensure that the currently enabled plugin\n    // in the viewport is capable of rendering this display set. If not\n    // then use the most capable available plugin\n    const pluginName =\n      !layout.plugin && displaySet && displaySet.plugin\n        ? displaySet.plugin\n        : layout.plugin;\n\n    const ViewportComponent = _getViewportComponent(\n      data, // Why do we pass this as `ViewportData`, when that's not really what it is?\n      viewportIndex,\n      children,\n      availablePlugins,\n      pluginName,\n      defaultPluginName\n    );\n\n    return (\n      <ViewportPane\n        onDrop={({\n          viewportIndex,\n          studyInstanceUid,\n          displaySetInstanceUid,\n        }) => {\n          setViewportData({\n            viewportIndex,\n            studyInstanceUid,\n            displaySetInstanceUid,\n          });\n        }}\n        viewportIndex={viewportIndex} // Needed by `setViewportData`\n        className={classNames('viewport-container', {\n          active: activeViewportIndex === viewportIndex,\n        })}\n        key={viewportIndex}\n      >\n        {ViewportComponent}\n      </ViewportPane>\n    );\n  });\n\n  return (\n    <div\n      data-cy=\"viewprt-grid\"\n      style={{\n        display: 'grid',\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {ViewportPanes}\n    </div>\n  );\n};\n\nViewportGrid.propTypes = {\n  viewportData: PropTypes.array.isRequired,\n  supportsDrop: PropTypes.bool.isRequired,\n  activeViewportIndex: PropTypes.number.isRequired,\n  layout: PropTypes.object.isRequired,\n  availablePlugins: PropTypes.object.isRequired,\n  setViewportData: PropTypes.func.isRequired,\n  studies: PropTypes.array,\n  children: PropTypes.node,\n  defaultPlugin: PropTypes.string,\n  numRows: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n};\n\nViewportGrid.defaultProps = {\n  viewportData: [],\n  numRows: 1,\n  numColumns: 1,\n  layout: {\n    viewports: [{}],\n  },\n  activeViewportIndex: 0,\n  supportsDrop: true,\n  availablePlugins: {\n    DefaultViewport,\n  },\n  defaultPlugin: 'defaultViewportPlugin',\n};\n\n/**\n *\n *\n * @param {*} plugin\n * @param {*} viewportData\n * @param {*} viewportIndex\n * @param {*} children\n * @returns\n */\nfunction _getViewportComponent(\n  viewportData,\n  viewportIndex,\n  children,\n  availablePlugins,\n  pluginName,\n  defaultPluginName\n) {\n  if (viewportData.displaySet) {\n    pluginName = pluginName || defaultPluginName;\n    const ViewportComponent = availablePlugins[pluginName];\n\n    if (!ViewportComponent) {\n      throw new Error(\n        `No Viewport Component available for name ${pluginName}.\n         Available plugins: ${JSON.stringify(availablePlugins)}`\n      );\n    }\n\n    return (\n      <ViewportComponent\n        viewportData={viewportData}\n        viewportIndex={viewportIndex}\n        children={[children]}\n      />\n    );\n  }\n\n  return <EmptyViewport />;\n}\n\nexport default ViewportGrid;\n","/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultViewport(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n","import ViewportGrid from './ViewportGrid.js';\nimport { MODULE_TYPES } from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../../App.js';\n\nconst mapStateToProps = state => {\n  const availableViewportModules = {};\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\n\n  return {\n    numRows,\n    numColumns,\n    layout,\n    activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedViewportGrid = connect(\n  mapStateToProps,\n  null\n)(ViewportGrid);\n\nexport default ConnectedViewportGrid;\n","import './ViewerMain.css';\n\nimport { Component } from 'react';\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, studyInstanceUid, displaySetInstanceUid) {\n    const study = studies.find(study => {\n      return study.studyInstanceUid === studyInstanceUid;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUid === displaySetInstanceUid;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevViewportAmount = prevProps.layout.viewports.length;\n    const viewportAmount = this.props.layout.viewports.length;\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\n\n    if (\n      this.props.studies !== prevProps.studies ||\n      (viewportAmount !== prevViewportAmount && !isVtk)\n    ) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  fillEmptyViewportPanes = () => {\n    const dirtyViewportPanes = [];\n    const { layout, viewportSpecificData } = this.props;\n    const { displaySets } = this.state;\n\n    if (!displaySets || !displaySets.length) {\n      return;\n    }\n\n    for (let i = 0; i < layout.viewports.length; i++) {\n      const viewportPane = viewportSpecificData[i];\n      const isNonEmptyViewport =\n        viewportPane &&\n        viewportPane.studyInstanceUid &&\n        viewportPane.displaySetInstanceUid;\n\n      if (isNonEmptyViewport) {\n        dirtyViewportPanes.push({\n          studyInstanceUid: viewportPane.studyInstanceUid,\n          displaySetInstanceUid: viewportPane.displaySetInstanceUid,\n        });\n\n        continue;\n      }\n\n      const foundDisplaySet =\n        displaySets.find(\n          ds =>\n            !dirtyViewportPanes.some(\n              v => v.displaySetInstanceUid === ds.displaySetInstanceUid\n            )\n        ) || displaySets[displaySets.length - 1];\n\n      dirtyViewportPanes.push(foundDisplaySet);\n    }\n\n    dirtyViewportPanes.forEach((vp, i) => {\n      if (vp && vp.studyInstanceUid) {\n        this.setViewportData({\n          viewportIndex: i,\n          studyInstanceUid: vp.studyInstanceUid,\n          displaySetInstanceUid: vp.displaySetInstanceUid,\n        });\n      }\n    });\n  };\n\n  setViewportData = ({\n    viewportIndex,\n    studyInstanceUid,\n    displaySetInstanceUid,\n  }) => {\n    const displaySet = this.findDisplaySet(\n      this.props.studies,\n      studyInstanceUid,\n      displaySetInstanceUid\n    );\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    const { viewportSpecificData } = this.props;\n    const viewportData = viewportSpecificData\n      ? Object.values(viewportSpecificData)\n      : [];\n\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedViewportGrid\n            studies={this.props.studies}\n            viewportData={viewportData}\n            setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n          </ConnectedViewportGrid>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n","import OHIF from \"@ohif/core\";\nimport ViewerMain from \"./ViewerMain\";\nimport { connect } from \"react-redux\";\n\nconst {\n  setViewportSpecificData,\n  clearViewportSpecificData\n} = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    layout,\n    viewportSpecificData,\n    viewports: state.viewports\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    }\n  };\n};\n\nconst ConnectedViewerMain = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerMain);\n\nexport default ConnectedViewerMain;\n","import './SidePanel.css';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass SidePanel extends Component {\n  static propTypes = {\n    from: PropTypes.string.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    children: PropTypes.node,\n    width: PropTypes.string,\n  };\n\n  render() {\n    const fromSideClass =\n      this.props.from === 'right' ? 'from-right' : 'from-left';\n\n    const styles = this.props.width\n      ? {\n          maxWidth: this.props.width,\n          marginRight: this.props.isOpen\n            ? '0'\n            : Number.parseInt(this.props.width) * -1,\n        }\n      : {};\n\n    return (\n      <section\n        style={styles}\n        className={classNames('sidepanel', fromSideClass, {\n          'is-open': this.props.isOpen,\n        })}\n      >\n        {this.props.children}\n      </section>\n    );\n  }\n}\n\nexport default SidePanel;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { MODULE_TYPES } from '@ohif/core';\nimport OHIF, { DICOMSR } from '@ohif/core';\nimport { withDialog } from '@ohif/ui';\nimport moment from 'moment';\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ConnectedToolbarRow from './ConnectedToolbarRow.js';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport SidePanel from './../components/SidePanel.js';\nimport { extensionManager } from './../App.js';\n\n// Contexts\nimport WhiteLabellingContext from '../context/WhiteLabellingContext.js';\nimport UserManagerContext from '../context/UserManagerContext';\n\nimport './Viewer.css';\n/**\n * Inits OHIF Hanging Protocol's onReady.\n * It waits for OHIF Hanging Protocol to be ready to instantiate the ProtocolEngine\n * Hanging Protocol will use OHIF LayoutManager to render viewports properly\n */\n/*const initHangingProtocol = () => {\n    // When Hanging Protocol is ready\n    HP.ProtocolStore.onReady(() => {\n\n        // Gets all StudyMetadata objects: necessary for Hanging Protocol to access study metadata\n        const studyMetadataList = OHIF.viewer.StudyMetadataList.all();\n\n        // Instantiate StudyMetadataSource: necessary for Hanging Protocol to get study metadata\n        const studyMetadataSource = new OHIF.studies.classes.OHIFStudyMetadataSource();\n\n        // Get prior studies map\n        const studyPriorsMap = OHIF.studylist.functions.getStudyPriorsMap(studyMetadataList);\n\n        // Creates Protocol Engine object with required arguments\n        const ProtocolEngine = new HP.ProtocolEngine(layoutManager, studyMetadataList, studyPriorsMap, studyMetadataSource);\n\n        // Sets up Hanging Protocol engine\n        HP.setEngine(ProtocolEngine);\n    });\n};*/\n\n/*const viewportUtils = OHIF.viewerbase.viewportUtils;\n\nOHIF.viewer.functionList = {\n    toggleCineDialog: viewportUtils.toggleCineDialog,\n    toggleCinePlay: viewportUtils.toggleCinePlay,\n    clearTools: viewportUtils.clearTools,\n    resetViewport: viewportUtils.resetViewport,\n    invert: viewportUtils.invert\n};*/\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n    studyInstanceUids: PropTypes.array,\n    activeServer: PropTypes.shape({\n      type: PropTypes.string,\n      wadoRoot: PropTypes.string,\n    }),\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n    // window.store.getState().viewports.viewportSpecificData\n    viewports: PropTypes.object.isRequired,\n    // window.store.getState().viewports.activeViewportIndex\n    activeViewportIndex: PropTypes.number.isRequired,\n    isStudyLoaded: PropTypes.bool,\n    dialog: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { activeServer } = this.props;\n    const server = Object.assign({}, activeServer);\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: DICOMSR.retrieveMeasurements,\n        store: DICOMSR.storeMeasurements,\n      },\n      server,\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n  }\n\n  state = {\n    isLeftSidePanelOpen: true,\n    isRightSidePanelOpen: false,\n    selectedRightSidePanel: '',\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\n    thumbnails: [],\n  };\n\n  componentWillUnmount() {\n    if (this.props.dialog) {\n      this.props.dialog.dismissAll();\n    }\n  }\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const studyDate = moment(study.studyDate, 'YYYYMMDD').toISOString();\n        if (studyDate < earliestDate) {\n          earliestDate = studyDate;\n        }\n        if (studyDate > latestDate) {\n          latestDate = studyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUids: this.props.studyInstanceUids,\n        patientId: filter.patientId,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, studyInstanceUid) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies, isStudyLoaded } = this.props;\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\n    const currentTimepointId = 'TimepointId';\n\n    const timepointApi = new TimepointApi(currentTimepointId, {\n      onTimepointsUpdated: this.onTimepointsUpdated,\n    });\n\n    const measurementApi = new MeasurementApi(timepointApi, {\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\n    });\n\n    this.currentTimepointId = currentTimepointId;\n    this.timepointApi = timepointApi;\n    this.measurementApi = measurementApi;\n\n    if (studies) {\n      const patientId = studies[0] && studies[0].patientId;\n\n      timepointApi.retrieveTimepoints({ patientId });\n      if (isStudyLoaded) {\n        this.measurementApi.retrieveMeasurements(patientId, [\n          currentTimepointId,\n        ]);\n      }\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { studies, isStudyLoaded } = this.props;\n    if (studies !== prevProps.studies) {\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(studies),\n      });\n    }\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\n      const patientId = studies[0] && studies[0].patientId;\n      const { currentTimepointId } = this;\n\n      this.timepointApi.retrieveTimepoints({ patientId });\n      this.measurementApi.retrieveMeasurements(patientId, [currentTimepointId]);\n    }\n  }\n\n  render() {\n    let VisiblePanelLeft, VisiblePanelRight;\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    panelExtensions.forEach(panelExt => {\n      panelExt.module.components.forEach(comp => {\n        if (comp.id === this.state.selectedRightSidePanel) {\n          VisiblePanelRight = comp.component;\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\n          VisiblePanelLeft = comp.component;\n        }\n      });\n    });\n\n    return (\n      <>\n        {/* HEADER */}\n        <WhiteLabellingContext.Consumer>\n          {whiteLabelling => (\n            <UserManagerContext.Consumer>\n              {userManager => (\n                <ConnectedHeader home={false} userManager={userManager}>\n                  {whiteLabelling.logoComponent}\n                </ConnectedHeader>\n              )}\n            </UserManagerContext.Consumer>\n          )}\n        </WhiteLabellingContext.Consumer>\n\n        {/* TOOLBAR */}\n        <ConnectedToolbarRow\n          isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\n          isRightSidePanelOpen={this.state.isRightSidePanelOpen}\n          selectedLeftSidePanel={\n            this.state.isLeftSidePanelOpen\n              ? this.state.selectedLeftSidePanel\n              : ''\n          }\n          selectedRightSidePanel={\n            this.state.isRightSidePanelOpen\n              ? this.state.selectedRightSidePanel\n              : ''\n          }\n          handleSidePanelChange={(side, selectedPanel) => {\n            const sideClicked = side && side[0].toUpperCase() + side.slice(1);\n            const openKey = `is${sideClicked}SidePanelOpen`;\n            const selectedKey = `selected${sideClicked}SidePanel`;\n            const updatedState = Object.assign({}, this.state);\n\n            const isOpen = updatedState[openKey];\n            const prevSelectedPanel = updatedState[selectedKey];\n            // RoundedButtonGroup returns `null` if selected button is clicked\n            const isSameSelectedPanel =\n              prevSelectedPanel === selectedPanel || selectedPanel === null;\n\n            updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\n\n            const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\n            if (isClosedOrShouldClose) {\n              updatedState[openKey] = !updatedState[openKey];\n            }\n\n            this.setState(updatedState);\n          }}\n          studies={this.props.studies}\n        />\n\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\n\n        {/* VIEWPORTS + SIDEPANELS */}\n        <div className=\"FlexboxLayout\">\n          {/* LEFT */}\n          <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\n            {VisiblePanelLeft ? (\n              <VisiblePanelLeft\n                viewports={this.props.viewports}\n                activeIndex={this.props.activeViewportIndex}\n              />\n            ) : (\n              <ConnectedStudyBrowser\n                studies={this.state.thumbnails}\n                studyMetadata={this.props.studies}\n              />\n            )}\n          </SidePanel>\n\n          {/* MAIN */}\n          <div className={classNames('main-content')}>\n            <ConnectedViewerMain studies={this.props.studies} />\n          </div>\n\n          {/* RIGHT */}\n          <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\n            {VisiblePanelRight && (\n              <VisiblePanelRight\n                viewports={this.props.viewports}\n                activeIndex={this.props.activeViewportIndex}\n              />\n            )}\n          </SidePanel>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withDialog(Viewer);\n\n/**\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\n * a mapping layer?\n *\n * TODO[react]:\n * - Add sorting of display sets\n * - Add showStackLoadingProgressBar option\n *\n * @param {Study[]} studies\n * @param {DisplaySet[]} studies[].displaySets\n */\nconst _mapStudiesToThumbnails = function(studies) {\n  return studies.map(study => {\n    const { studyInstanceUid } = study;\n\n    const thumbnails = study.displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUid,\n        seriesDescription,\n        seriesNumber,\n        instanceNumber,\n        numImageFrames,\n      } = displaySet;\n\n      let imageId;\n      let altImageText;\n\n      if (displaySet.modality && displaySet.modality === 'SEG') {\n        // TODO: We want to replace this with a thumbnail showing\n        // the segmentation map on the image, but this is easier\n        // and better than what we have right now.\n        altImageText = 'SEG';\n      } else if (displaySet.images && displaySet.images.length) {\n        const imageIndex = Math.floor(displaySet.images.length / 2);\n\n        imageId = displaySet.images[imageIndex].getImageId();\n      } else {\n        altImageText = displaySet.modality ? displaySet.modality : 'UN';\n      }\n\n      return {\n        imageId,\n        altImageText,\n        displaySetInstanceUid,\n        seriesDescription,\n        seriesNumber,\n        instanceNumber,\n        numImageFrames,\n      };\n    });\n\n    return {\n      studyInstanceUid,\n      thumbnails,\n    };\n  });\n};\n","import { connect } from 'react-redux';\nimport Viewer from './Viewer.js';\nimport OHIF from '@ohif/core';\n\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n  return servers.servers.find(isActive);\n};\n\nconst mapStateToProps = state => {\n  const { viewports, servers } = state;\n  return {\n    viewports: viewports.viewportSpecificData,\n    activeViewportIndex: viewports.activeViewportIndex,\n    activeServer: getActiveServer(servers),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTimepointsUpdated: timepoints => {\n      dispatch(setTimepoints(timepoints));\n    },\n    onMeasurementsUpdated: measurements => {\n      dispatch(setMeasurements(measurements));\n    },\n  };\n};\n\nconst ConnectedViewer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Viewer);\n\nexport default ConnectedViewer;\n"],"sourceRoot":""}