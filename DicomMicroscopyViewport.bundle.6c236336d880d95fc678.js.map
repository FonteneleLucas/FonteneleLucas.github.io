{"version":3,"sources":["webpack:////home/fontenele/Documents/Viewers/extensions/dicom-microscopy/src/DicomMicroscopyViewport.js"],"names":["DicomMicroscopyViewport","props","error","debouncedResize","container","React","createRef","debounce","viewer","resize","displaySet","dicomWebClient","searchInstanceOptions","studyInstanceUID","studyInstanceUid","seriesInstanceUID","seriesInstanceUid","searchForInstances","then","instances","promises","i","length","sopInstanceUID","retrieveInstanceOptions","promise","retrieveInstanceMetadata","metadata","push","Promise","all","filter","m","api","microscopyViewer","VLWholeSlideMicroscopyImageViewer","client","retrieveRendered","render","this","viewportData","installOpenLayersRenderer","current","style","width","height","className","ReactResizeDetector","handleWidth","handleHeight","onResize","onWindowResize","state","JSON","stringify","ref","Component"],"mappings":"wmCAIMA,E,YAOJ,WAAYC,GAAO,M,IAAA,O,4FAAA,S,EACjB,K,EAAA,eAAMA,GAAN,G,gDADiB,eANX,CACNC,MAAO,OAKU,gBAFV,MAEU,yBAsFF,WACf,EAAKC,qBApFL,EAAKC,UAAYC,IAAMC,YAEvB,EAAKH,gBAAkBI,KAAS,WAC1B,EAAKC,QAAQ,EAAKA,OAAOC,WAC5B,KAPc,E,iTAYOL,EAAWM,GAAY,WACzCC,EAAiBD,EAAWC,eAE5BC,EAAwB,CAC5BC,iBAAkBH,EAAWI,iBAC7BC,kBAAmBL,EAAWM,mBAGhCL,EACGM,mBAAmBL,GACnBM,MAAK,SAAAC,GAEJ,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAAK,CACzC,IAAME,EAAiBJ,EAAUE,GAAG,YAAb,MAAkC,GACnDG,EAA0B,CAC9BX,iBAAkBH,EAAWI,iBAC7BC,kBAAmBL,EAAWM,kBAC9BO,kBAGIE,EAAUd,EACbe,yBAAyBF,GACzBN,MAAK,SAAAS,GAEJ,GAAqB,WADHA,EAAS,GAAG,YAAZ,MACJ,GACZ,OAAOA,EAAS,MAGtBP,EAASQ,KAAKH,GAEhB,OAAOI,QAAQC,IAAIV,MAEpBF,KAxBH,e,EAAA,G,EAAA,yBAwBQ,WAAMS,GAAN,iGACJA,EAAWA,EAASI,QAAO,SAAAC,GAAC,OAAIA,KAD5B,SAGkB,mCAHlB,gBAGIC,EAHJ,EAGIA,IACFC,EAAmBD,EAAIE,kCAE7B,EAAK3B,OAAS,IAAI0B,EAAiB,CACjCE,OAAQzB,EACRgB,WACAU,kBAAkB,IAGpB,EAAK7B,OAAO8B,OAAO,CAAElC,cAZjB,0C,+KAxBR,yD,0CAwCkB,IACVM,EAAe6B,KAAKtC,MAAMuC,aAA1B9B,WAER6B,KAAKE,0BAA0BF,KAAKnC,UAAUsC,QAAShC,K,+BAIvD,IAAMiC,EAAQ,CAAEC,MAAO,OAAQC,OAAQ,QACvC,OACE,yBAAKC,UAAW,wBAAyBH,MAAOA,GAC7CI,KACC,kBAAC,IAAD,CACEC,aAAW,EACXC,cAAY,EACZC,SAAUX,KAAKY,iBAGlBZ,KAAKa,MAAMlD,MACV,4BAAKmD,KAAKC,UAAUf,KAAKa,MAAMlD,QAE/B,yBAAKyC,MAAOA,EAAOY,IAAKhB,KAAKnC,kB,8BAvFDoD,aAkGvBxD","file":"DicomMicroscopyViewport.bundle.6c236336d880d95fc678.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport debounce from 'lodash.debounce';\n\nclass DicomMicroscopyViewport extends Component {\n  state = {\n    error: null,\n  };\n\n  viewer = null;\n\n  constructor(props) {\n    super(props);\n\n    this.container = React.createRef();\n\n    this.debouncedResize = debounce(() => {\n      if (this.viewer) this.viewer.resize();\n    }, 100);\n  }\n\n  // install the microscopy renderer into the web page.\n  // you should only do this once.\n  installOpenLayersRenderer(container, displaySet) {\n    const dicomWebClient = displaySet.dicomWebClient;\n\n    const searchInstanceOptions = {\n      studyInstanceUID: displaySet.studyInstanceUid,\n      seriesInstanceUID: displaySet.seriesInstanceUid,\n    };\n\n    dicomWebClient\n      .searchForInstances(searchInstanceOptions)\n      .then(instances => {\n        const promises = [];\n        for (let i = 0; i < instances.length; i++) {\n          const sopInstanceUID = instances[i]['00080018']['Value'][0];\n          const retrieveInstanceOptions = {\n            studyInstanceUID: displaySet.studyInstanceUid,\n            seriesInstanceUID: displaySet.seriesInstanceUid,\n            sopInstanceUID,\n          };\n\n          const promise = dicomWebClient\n            .retrieveInstanceMetadata(retrieveInstanceOptions)\n            .then(metadata => {\n              const imageType = metadata[0]['00080008']['Value'];\n              if (imageType[2] === 'VOLUME') {\n                return metadata[0];\n              }\n            });\n          promises.push(promise);\n        }\n        return Promise.all(promises);\n      })\n      .then(async metadata => {\n        metadata = metadata.filter(m => m);\n\n        const { api } = await import(/* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer');\n        const microscopyViewer = api.VLWholeSlideMicroscopyImageViewer;\n\n        this.viewer = new microscopyViewer({\n          client: dicomWebClient,\n          metadata,\n          retrieveRendered: false\n        });\n\n        this.viewer.render({ container });\n      });\n  }\n\n  componentDidMount() {\n    const { displaySet } = this.props.viewportData;\n\n    this.installOpenLayersRenderer(this.container.current, displaySet);\n  }\n\n  render() {\n    const style = { width: '100%', height: '100%' };\n    return (\n      <div className={'DicomMicroscopyViewer'} style={style}>\n        {ReactResizeDetector && (\n          <ReactResizeDetector\n            handleWidth\n            handleHeight\n            onResize={this.onWindowResize}\n          />\n        )}\n        {this.state.error ? (\n          <h2>{JSON.stringify(this.state.error)}</h2>\n        ) : (\n          <div style={style} ref={this.container} />\n        )}\n      </div>\n    );\n  }\n\n  onWindowResize = () => {\n    this.debouncedResize();\n  };\n}\n\nexport default DicomMicroscopyViewport;\n"],"sourceRoot":""}