{"version":3,"sources":["webpack:///./routes/StandaloneRouting.js","webpack:///./connectedComponents/ConnectedStandaloneRouting.js","webpack:///./customHooks/usePrevious.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js","webpack:////home/fontenele/Documents/Viewers/node_modules/querystring-es3/index.js","webpack:////home/fontenele/Documents/Viewers/node_modules/querystring-es3/decode.js","webpack:////home/fontenele/Documents/Viewers/node_modules/querystring-es3/encode.js"],"names":["studyMetadataManager","utils","updateMetaDataManager","OHIFStudyMetadata","metadata","StandaloneRouting","studies","server","studyInstanceUids","seriesInstanceUids","error","loading","query","Promise","resolve","reject","url","Error","oReq","XMLHttpRequest","addEventListener","log","warn","event","target","status","responseText","info","JSON","stringify","data","parse","servers","dicomWeb","type","props","activateServer","split","open","setRequestHeader","send","search","this","location","slice","length","qs","parseQueryAndRetrieveDICOMWebData","_mapStudiesToNewFormat","updatedStudies","updatedStudiesInstanceUids","setState","message","state","NotFound","showGoBackButton","ConnectedViewer","ConnectedViewerRetrieveStudyData","Component","PropTypes","object","store","setServers","func","purge","uniqueStudyUids","Set","map","study","studyMetadata","studyInstanceUid","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","setDisplaySets","add","Array","from","ConnectedStandaloneRouting","connect","dispatch","usePrevious","value","ref","useRef","useEffect","current","OHIFSeriesMetadata","retrieveStudiesMetadata","deleteStudyMetadataPromise","makeCancelable","_promoteList","filters","isFilterStrategy","promoted","_sortStudyDisplaySet","_promoteStudyDisplaySet","Object","keys","seriesInstanceUID","promotedResponse","list","searchMethod","response","index","findIndex","bind","undefined","first","splice","_promoteToFront","getDisplaySets","valueToCompare","displaySet","seriesInstanceUid","_isQueryParamApplied","applied","seriesList","firstSeries","_showUserMessage","queryParamApplied","dialog","show","showUserMessage","_addSeriesToStudy","series","getData","seriesMetadata","addSeries","createAndAddDisplaySetsForSeries","_updateMetaDataManager","get","_updateStudyDisplaySets","sortDisplaySets","_loadRemainingSeries","seriesLoader","promisesLoaders","hasNext","push","next","then","all","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","clearViewportSpecificData","useState","setError","setStudies","isStudyLoaded","setIsStudyLoaded","snackbarContext","useSnackbarContext","useContext","AppContext","appConfig","filterQueryParam","processStudies","studiesData","isArray","result","isCanceled","isQueryParamApplied","studyDidLoad","catch","loadStudies","retrieveParams","purgeCancellablePromises","cancel","remove","prevStudyInstanceUids","every","e","includes","propTypes","array","isRequired","OHIF","redux","actions","isActive","a","active","ownProps","activeServer","find","exports","decode","encode","hasOwnProperty","obj","prop","prototype","call","module","sep","eq","options","regexp","maxKeys","len","i","kstr","vstr","k","v","x","replace","idx","indexOf","substr","decodeURIComponent","xs","toString","stringifyPrimitive","isFinite","name","objectKeys","ks","encodeURIComponent","join","f","res","key"],"mappings":"mrCAUQA,EAAgDC,IAAhDD,qBAAsBE,EAA0BD,IAA1BC,sBACtBC,EAAsBC,IAAtBD,kBAEFE,E,6UACI,CACNC,QAAS,KACTC,OAAQ,KACRC,kBAAmB,KACnBC,mBAAoB,KACpBC,MAAO,KACPC,SAAS,I,+TASuBC,GAAO,WACvC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAMJ,EAAMI,IAElB,IAAKA,EACH,OAAOD,EAAO,IAAIE,MAAM,4CAK1B,IAAMC,EAAO,IAAIC,eAGjBD,EAAKE,iBAAiB,SAAS,SAAAV,GAC7BW,IAAIC,KAAK,oDACTP,EAAOL,MAKTQ,EAAKE,iBAAiB,QAAQ,SAAAG,GACA,MAAxBA,EAAMC,OAAOC,QACfV,EAAO,IAAIE,MAAM,uBAKdC,EAAKQ,eACRL,IAAIC,KAAK,0BACTP,EAAO,IAAIE,MAAM,4BAGnBI,IAAIM,KAAKC,KAAKC,UAAUX,EAAKQ,aAAc,KAAM,IAEjD,IAAMI,EAAOF,KAAKG,MAAMb,EAAKQ,cAC7B,GAAII,EAAKE,QAAS,CACXpB,EAAMJ,oBACTa,IAAIC,KAAK,oCACTP,EAAO,IAAIE,MAAM,sCAGnB,IAAMV,EAASuB,EAAKE,QAAQC,SAAS,GACrC1B,EAAO2B,KAAO,WAEdb,IAAIC,KAAK,oBAAqBf,GAC9B,EAAK4B,MAAMC,eAAe7B,GAE1B,IAAMC,EAAoBI,EAAMJ,kBAAkB6B,MAAM,KAClD5B,EAAqBG,EAAMH,mBAAqBG,EAAMH,mBAAmB4B,MAAM,KAAO,GAE5FvB,EAAQ,CAAEP,SAAQC,oBAAmBC,4BAErCK,EAAQ,CAAER,QAASwB,EAAKxB,QAASE,kBAAmB,QAOxDa,IAAIM,KAAJ,8BAAgCX,IAChCE,EAAKoB,KAAK,MAAOtB,GACjBE,EAAKqB,iBAAiB,SAAU,oBAGhCrB,EAAKsB,Y,gMASLC,GAHMA,EAAWC,KAAKP,MAAMQ,SAAtBF,QAGUG,MAAM,EAAGH,EAAOI,QAC1BjC,EAAQkC,IAAGf,MAAMU,G,SAObC,KAAKK,kCAAkCnC,G,gBAJ/CL,E,EAAAA,OACAD,E,EAAAA,QACAE,E,EAAAA,kBACAC,E,EAAAA,mBAGEH,IAAS,EAIP0C,EAAuB1C,GAFhB2C,EAFA,EAET3C,QACmB4C,EAHV,EAGT1C,kBAEFF,EAAU2C,EACVzC,EAAoB0C,GAGtBR,KAAKS,SAAS,CACZ7C,UACAC,SACAC,oBACAC,qBACAE,SAAS,I,kDAGX+B,KAAKS,SAAS,CAAEzC,MAAO,KAAM0C,QAASzC,SAAS,I,qTAKjD,IAAMyC,EAAUV,KAAKW,MAAM3C,MAAX,iBAA6BkB,KAAKC,UAAUa,KAAKW,MAAM3C,QAAW,gBAClF,OAAIgC,KAAKW,MAAM3C,OAASgC,KAAKW,MAAM1C,QAC1B,kBAAC2C,EAAA,EAAD,CAAUF,QAASA,EAASG,iBAAkBb,KAAKW,MAAM3C,QAG3DgC,KAAKW,MAAM/C,QAChB,kBAACkD,EAAA,EAAD,CAAiBlD,QAASoC,KAAKW,MAAM/C,UAEnC,kBAACmD,EAAA,EAAD,CACEjD,kBAAmBkC,KAAKW,MAAM7C,kBAC9BC,mBAAoBiC,KAAKW,MAAM5C,mBAC/BF,OAAQmC,KAAKW,MAAM9C,c,8BApIGmD,a,EAA1BrD,E,YAUe,CACjBsC,SAAUgB,IAAUC,OACpBC,MAAOF,IAAUC,OACjBE,WAAYH,IAAUI,OA6H1B,IAAMf,EAAyB,SAAA1C,GAC7BN,EAAqBgE,QAGrB,IAAMC,EAAkB,IAAIC,IAkB5B,MAAO,CACL5D,QAlBqBA,EAAQ6D,KAAI,SAAAC,GACjC,IAAMC,EAAgB,IAAIlE,EAAkBiE,EAAOA,EAAME,kBAEnDC,EAAyBC,IAAiBC,QAAjB,sBAW/B,OAVAL,EAAMM,YAAcN,EAAMM,aACxBL,EAAcM,kBAAkBJ,GAClCF,EAAcO,eAAeR,EAAMM,aAGnCxE,EAAsBkE,GAEtBpE,EAAqB6E,IAAIR,GACzBJ,EAAgBY,IAAIT,EAAME,kBAEnBF,KAKP5D,kBAAmBsE,MAAMC,KAAKd,KAInB5D,ICpKT2E,EAA6BC,YACjC,MAbyB,SAAAC,GACzB,MAAO,CACL9C,eAAgB,SAAA7B,GAKd2E,EAJe,CACbhD,KAAM,kBACN3B,eAO2B0E,CAGjC5E,GAEa2E,a,iCCpBf,6CACe,SAASG,EAAYC,GAClC,IAAMC,EAAMC,mBAKZ,OAJAC,qBAAU,WACRF,EAAIG,QAAUJ,IACb,CAACA,IAEGC,EAAIG,U,kmCCELrF,EAA0CC,IAA1CD,kBAAmBsF,EAAuBrF,IAAvBqF,mBACnBC,EAAwDpF,IAAxDoF,wBAAyBC,EAA+BrF,IAA/BqF,2BACzB3F,EAAgEC,IAAhED,qBAAsBE,EAA0CD,IAA1CC,sBAAuB0F,EAAmB3F,IAAnB2F,eAgC/CC,EAAe,SAACzB,EAAOC,EAAeyB,EAASC,GACnD,IAAIC,GAAW,EAOf,OALKD,IACHE,EAAqB7B,EAAOC,GAC5B2B,EAAWE,EAAwB9B,EAAOC,EAAeyB,IAGpDE,GAGHE,EAA0B,SAAC9B,EAAOC,EAAeyB,GACrD,IAAIE,GAAW,EAIf,GAH0BG,OAAOC,KAAKN,GAASjD,OACE,EAEvB,KAChBwD,EAAsBP,EAAtBO,kBAKFC,EAjDc,SAACC,EAAMnB,EAAOoB,GACpC,IAAIC,EAAW,EAAIF,GACfP,GAAW,EACTU,EAAQD,EAASE,UAAUH,EAAaI,UAAKC,EAAWzB,IAE9D,GAAIsB,EAAQ,EAAG,CACb,IAAMI,EAAQL,EAASM,OAAOL,EAAO,GACrCD,EAAW,GAAH,SAAOK,GAAP,EAAiBL,IAO3B,OAJIC,GAAS,IACXV,GAAW,GAGN,CACLA,WACAlE,KAAM2E,GAiCmBO,CACvB3C,EAAc4C,iBACdZ,GALoB,SAACa,EAAgBC,GACrC,OAAOA,EAAWC,oBAAsBF,KAQ1C9C,EAAMM,YAAc4B,EAAiBxE,KACrCkE,EAAWM,EAAiBN,SAG9B,OAAOA,GAUHqB,EAAuB,SAACjD,GAA0C,IAAnC0B,EAAmC,uDAAzB,GAAIC,EAAqB,uCAC9DM,EAAsBP,EAAtBO,kBACJiB,GAAU,EAEd,IAAKjB,EACH,OAAOiB,EAL6D,MAQxBlD,EAAtCmD,kBAR8D,MAQjD,GARiD,IAQxBnD,EAArBM,mBAR6C,MAQ/B,GAR+B,EAShE8C,EAAczB,EAAmBwB,EAAW,GAAK7C,EAAY,GAMnE,OAJK8C,GAAeA,EAAYJ,oBAAsBf,IACpDiB,GAAU,GAGLA,GAEHG,EAAmB,SAACC,EAAmBtE,GAAyB,IAAhBuE,EAAgB,uDAAP,GAC7D,IAAID,EAAJ,CADoE,MAKtBC,EAAtCC,KAAMC,OALsD,MAKpC,aALoC,EAMpEA,EAAgB,CACdzE,cAIE0E,EAAoB,SAACzD,EAAe0D,GACxC,IAAMxD,EACJC,IAAiBC,QAAjB,sBACIL,EAAQC,EAAc2D,UACtBC,EAAiB,IAAIxC,EAAmBsC,EAAQ3D,GACtDC,EAAc6D,UAAUD,GACxB5D,EAAc8D,iCACZ5D,EACA0D,GACA,GAEF7D,EAAMM,YAAcL,EAAc4C,iBAClCmB,EAAuBhE,EAAO2D,EAAOX,oBAGjCgB,EAAyB,SAAChE,EAAOC,EAAe0D,GACpD7H,EAAsBkE,EAAO2D,GADkC,IAGvDzD,EAAqBF,EAArBE,iBAEHtE,EAAqBqI,IAAI/D,IAC5BtE,EAAqB6E,IAAIR,IAIvBiE,EAA0B,SAAClE,EAAOC,GACtC,IAAME,EACJC,IAAiBC,QAAjB,sBAEGL,EAAMM,cACTN,EAAMM,YAAcL,EAAcM,kBAAkBJ,IAGtDF,EAAcO,eAAeR,EAAMM,cAG/BuB,EAAuB,SAAC7B,EAAOC,GACnCA,EAAckE,gBAAgBnE,EAAMM,cAEhC8D,EAAuB,SAAAnE,GAAiB,IACpCoE,EAAiBpE,EAAc2D,UAA/BS,aACR,IAAKA,EACH,OAAO5H,QAAQC,UAGjB,IADA,IAAM4H,EAAkB,GACjBD,EAAaE,WAClBD,EAAgBE,KACdH,EACGI,OACAC,MACC,SAAAf,GAAeD,EAAkBzD,EAAe0D,MAChD,SAAArH,GAAcW,IAAIX,MAAMA,OAKhC,OAAOG,QAAQkI,IAAIL,IAGrB,SAASM,EAAT,GAKG,IASGC,EACAC,EAdJ3I,EAIC,EAJDA,OACAC,EAGC,EAHDA,kBACAC,EAEC,EAFDA,mBACA0I,EACC,EADDA,0BACC,IAEyBC,oBAAS,GAFlC,GAEM1I,EAFN,KAEa2I,EAFb,SAG6BD,mBAAS,IAHtC,GAGM9I,EAHN,KAGegJ,EAHf,SAIyCF,oBAAS,GAJlD,GAIMG,EAJN,KAIqBC,EAJrB,KAKKC,EAAkBC,cALvB,EAM0BC,qBAAWC,KAA9BC,UANP,cAMmB,GANnB,GAOOC,iBAAkB/D,OAPzB,SAsDKgE,EAAiB,SAACC,EAAalE,GACnC,GAAIhB,MAAMmF,QAAQD,IAAgBA,EAAYnH,OAAS,EAAG,CAExD,IAAMvC,EAAU0J,EAAY7F,KAAI,SAAAC,GAC9B,IAAMC,EAAgB,IAAIlE,EACxBiE,EACAA,EAAME,kBAsBR,OAnBAgE,EAAwBlE,EAAOC,GAC/B+D,EAAuBhE,EAAOC,GAG9B4E,EAAyB7E,EAAME,kBAAoBsB,EACjD4C,EAAqBnE,IAEpByE,MAAK,SAAAoB,GACAA,IAAWA,EAAOC,YArDX,SAAC/F,EAAOC,EAAeyB,GAEzBD,EACfzB,EACAC,EACAyB,EACAC,IAKAoD,EAA0B,GAG5B,IAAMiB,EAAsB/C,EAC1BjD,EACA0B,EACAC,GAGF0B,EACE2C,EACA,iFACAX,GAGFH,EAAW,GAAD,SAAKhJ,GAAL,CAAc8D,KACxBoF,GAAiB,GA2BPa,CAAajG,EAAOC,EAAeyB,MAGtCwE,OAAM,SAAA5J,GACDA,IAAUA,EAAMyJ,aAClBd,GAAS,GACThI,IAAIX,MAAMA,OAIT0D,KAGTkF,EAAWhJ,KAITiK,EAAW,e,EAAA,G,EAAA,yBAAG,uGAClB,IACQzE,EAAU,GAEVO,EAAoB5F,GAAsBA,EAAmB,GAE7D+J,EAAiB,CAACjK,EAAQC,GAE5B6F,IACFP,EAAQO,kBAAoBA,EAExBN,GACFyE,EAAe5B,KAAK9C,IAIxBoD,EAA0B1I,GAAqBoF,EAC7CF,EAAuB,WAAvB,EAA2B8E,IAE1B1B,MAAK,SAAAoB,GACAA,IAAWA,EAAOC,YACpBJ,EAAeG,EAAQpE,MAG1BwE,OAAM,SAAA5J,GACDA,IAAUA,EAAMyJ,aAClBd,GAAS,GACThI,IAAIX,MAAMA,OAGhB,MAAOA,GACHA,IACF2I,GAAS,GACThI,IAAIX,MAAMA,IAjCI,0C,+KAAH,qDAsCX+J,EAA2B,WAC/B,IAAK,IAAIjK,KAAqB0I,EACxB,WAAYA,EAA0B1I,IACxC0I,EAA0B1I,GAAmBkK,SAIjD,IAAK,IAAIlK,KAAqByI,EACxB,WAAYA,EAAyBzI,KACvCyI,EAAyBzI,GAAmBkK,SAC5C/E,EAA2BnF,GAC3BR,EAAqB2K,OAAOnK,KAK5BoK,EAAwBzF,YAAY3E,GAqB1C,OAnBA+E,qBAAU,aAC8BqF,GAAyBA,EAAsBC,OAAM,SAAAC,GAAC,OAAItK,EAAkBuK,SAASD,SAGzH9K,EAAqBgE,QACrByG,OAED,CAACjK,IAEJ+E,qBAAU,WAKR,OAJA0D,EAA2B,GAC3BC,EAA4B,GAC5BqB,IAEO,WACLE,OAED,IAEC/J,EACK,uCAAakB,KAAKC,UAAUnB,IAInC,kBAAC8C,EAAA,EAAD,CACElD,QAASA,EACTiJ,cAAeA,EACf/I,kBAAmBA,IAKzBwI,EAAwBgC,UAAY,CAClCxK,kBAAmBmD,IAAUsH,MAAMC,WACnCzK,mBAAoBkD,IAAUsH,MAC9B1K,OAAQoD,IAAUC,OAClBuF,0BAA2BxF,IAAUI,KAAKmH,YAG7BlC,QCrWPG,E,MAA8BgC,EAAKC,MAAMC,QAAzClC,0BACFmC,EAAW,SAAAC,GAAC,OAAiB,IAAbA,EAAEC,QAiBlB/H,EAAmCwB,aAfjB,SAAC5B,EAAOoI,GAC9B,IAAMC,EAAerI,EAAMrB,QAAQA,QAAQ2J,KAAKL,GAEhD,MAAO,CACL/K,OAAQkL,EAASlL,QAAUmL,MAGJ,SAAAxG,GACzB,MAAO,CACLiE,0BAA2B,WACzBjE,EAASiE,SAK0BlE,CAGvC+D,GAEavF,O,iCCzBfmI,EAAQC,OAASD,EAAQ7J,MAAQ,EAAQ,KACzC6J,EAAQE,OAASF,EAAQ/J,UAAY,EAAQ,M,iCCuB7C,SAASkK,EAAeC,EAAKC,GAC3B,OAAO9F,OAAO+F,UAAUH,eAAeI,KAAKH,EAAKC,GAGnDG,EAAOR,QAAU,SAAS9I,EAAIuJ,EAAKC,EAAIC,GACrCF,EAAMA,GAAO,IACbC,EAAKA,GAAM,IACX,IAAIN,EAAM,GAEV,GAAkB,iBAAPlJ,GAAiC,IAAdA,EAAGD,OAC/B,OAAOmJ,EAGT,IAAIQ,EAAS,MACb1J,EAAKA,EAAGT,MAAMgK,GAEd,IAAII,EAAU,IACVF,GAAsC,iBAApBA,EAAQE,UAC5BA,EAAUF,EAAQE,SAGpB,IAAIC,EAAM5J,EAAGD,OAET4J,EAAU,GAAKC,EAAMD,IACvBC,EAAMD,GAGR,IAAK,IAAIE,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAC5B,IAEIC,EAAMC,EAAMC,EAAGC,EAFfC,EAAIlK,EAAG6J,GAAGM,QAAQT,EAAQ,OAC1BU,EAAMF,EAAEG,QAAQb,GAGhBY,GAAO,GACTN,EAAOI,EAAEI,OAAO,EAAGF,GACnBL,EAAOG,EAAEI,OAAOF,EAAM,KAEtBN,EAAOI,EACPH,EAAO,IAGTC,EAAIO,mBAAmBT,GACvBG,EAAIM,mBAAmBR,GAElBd,EAAeC,EAAKc,GAEd7C,EAAQ+B,EAAIc,IACrBd,EAAIc,GAAGlE,KAAKmE,GAEZf,EAAIc,GAAK,CAACd,EAAIc,GAAIC,GAJlBf,EAAIc,GAAKC,EAQb,OAAOf,GAGT,IAAI/B,EAAUnF,MAAMmF,SAAW,SAAUqD,GACvC,MAA8C,mBAAvCnH,OAAO+F,UAAUqB,SAASpB,KAAKmB,K,iCC3DxC,IAAIE,EAAqB,SAAST,GAChC,cAAeA,GACb,IAAK,SACH,OAAOA,EAET,IAAK,UACH,OAAOA,EAAI,OAAS,QAEtB,IAAK,SACH,OAAOU,SAASV,GAAKA,EAAI,GAE3B,QACE,MAAO,KAIbX,EAAOR,QAAU,SAASI,EAAKK,EAAKC,EAAIoB,GAOtC,OANArB,EAAMA,GAAO,IACbC,EAAKA,GAAM,IACC,OAARN,IACFA,OAAMnF,GAGW,iBAARmF,EACF7H,EAAIwJ,EAAW3B,IAAM,SAASc,GACnC,IAAIc,EAAKC,mBAAmBL,EAAmBV,IAAMR,EACrD,OAAIrC,EAAQ+B,EAAIc,IACP3I,EAAI6H,EAAIc,IAAI,SAASC,GAC1B,OAAOa,EAAKC,mBAAmBL,EAAmBT,OACjDe,KAAKzB,GAEDuB,EAAKC,mBAAmBL,EAAmBxB,EAAIc,QAEvDgB,KAAKzB,GAILqB,EACEG,mBAAmBL,EAAmBE,IAASpB,EAC/CuB,mBAAmBL,EAAmBxB,IAF3B,IAKpB,IAAI/B,EAAUnF,MAAMmF,SAAW,SAAUqD,GACvC,MAA8C,mBAAvCnH,OAAO+F,UAAUqB,SAASpB,KAAKmB,IAGxC,SAASnJ,EAAKmJ,EAAIS,GAChB,GAAIT,EAAGnJ,IAAK,OAAOmJ,EAAGnJ,IAAI4J,GAE1B,IADA,IAAIC,EAAM,GACDrB,EAAI,EAAGA,EAAIW,EAAGzK,OAAQ8J,IAC7BqB,EAAIpF,KAAKmF,EAAET,EAAGX,GAAIA,IAEpB,OAAOqB,EAGT,IAAIL,EAAaxH,OAAOC,MAAQ,SAAU4F,GACxC,IAAIgC,EAAM,GACV,IAAK,IAAIC,KAAOjC,EACV7F,OAAO+F,UAAUH,eAAeI,KAAKH,EAAKiC,IAAMD,EAAIpF,KAAKqF,GAE/D,OAAOD","file":"ConnectedStandaloneRouting.bundle.47a516c55084ad83459c.js","sourcesContent":["import React, { Component } from 'react';\nimport { log, metadata, utils } from '@ohif/core';\nimport PropTypes from 'prop-types';\nimport qs from 'querystring';\n\nimport { extensionManager } from './../App.js';\nimport ConnectedViewer from '../connectedComponents/ConnectedViewer';\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\nimport NotFound from '../routes/NotFound';\n\nconst { studyMetadataManager, updateMetaDataManager } = utils;\nconst { OHIFStudyMetadata } = metadata;\n\nclass StandaloneRouting extends Component {\n  state = {\n    studies: null,\n    server: null,\n    studyInstanceUids: null,\n    seriesInstanceUids: null,\n    error: null,\n    loading: true,\n  };\n\n  static propTypes = {\n    location: PropTypes.object,\n    store: PropTypes.object,\n    setServers: PropTypes.func,\n  };\n\n  parseQueryAndRetrieveDICOMWebData(query) {\n    return new Promise((resolve, reject) => {\n      const url = query.url;\n\n      if (!url) {\n        return reject(new Error('No URL was specified. Use ?url=$yourURL'));\n      }\n\n      // Define a request to the server to retrieve the study data\n      // as JSON, given a URL that was in the Route\n      const oReq = new XMLHttpRequest();\n\n      // Add event listeners for request failure\n      oReq.addEventListener('error', error => {\n        log.warn('An error occurred while retrieving the JSON data');\n        reject(error);\n      });\n\n      // When the JSON has been returned, parse it into a JavaScript Object\n      // and render the OHIF Viewer with this data\n      oReq.addEventListener('load', event => {\n        if (event.target.status === 404) {\n          reject(new Error('No JSON data found'));\n        }\n\n        // Parse the response content\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n        if (!oReq.responseText) {\n          log.warn('Response was undefined');\n          reject(new Error('Response was undefined'));\n        }\n\n        log.info(JSON.stringify(oReq.responseText, null, 2));\n\n        const data = JSON.parse(oReq.responseText);\n        if (data.servers) {\n          if (!query.studyInstanceUids) {\n            log.warn('No study instance uids specified');\n            reject(new Error('No study instance uids specified'));\n          }\n\n          const server = data.servers.dicomWeb[0];\n          server.type = 'dicomWeb';\n\n          log.warn('Activating server', server);\n          this.props.activateServer(server);\n\n          const studyInstanceUids = query.studyInstanceUids.split(';');\n          const seriesInstanceUids = query.seriesInstanceUids ? query.seriesInstanceUids.split(';') : [];\n\n          resolve({ server, studyInstanceUids, seriesInstanceUids });\n        } else {\n          resolve({ studies: data.studies, studyInstanceUids: [] });\n        }\n      });\n\n      // Open the Request to the server for the JSON data\n      // In this case we have a server-side route called /api/\n      // which responds to GET requests with the study data\n      log.info(`Sending Request to: ${url}`);\n      oReq.open('GET', url);\n      oReq.setRequestHeader('Accept', 'application/json');\n\n      // Fire the request to the server\n      oReq.send();\n    });\n  }\n\n  async componentDidMount() {\n    try {\n      let { search } = this.props.location;\n\n      // Remove ? prefix which is included for some reason\n      search = search.slice(1, search.length);\n      const query = qs.parse(search);\n\n      let {\n        server,\n        studies,\n        studyInstanceUids,\n        seriesInstanceUids,\n      } = await this.parseQueryAndRetrieveDICOMWebData(query);\n\n      if (studies) {\n        const {\n          studies: updatedStudies,\n          studyInstanceUids: updatedStudiesInstanceUids,\n        } = _mapStudiesToNewFormat(studies);\n        studies = updatedStudies;\n        studyInstanceUids = updatedStudiesInstanceUids;\n      }\n\n      this.setState({\n        studies,\n        server,\n        studyInstanceUids,\n        seriesInstanceUids,\n        loading: false,\n      });\n    } catch (error) {\n      this.setState({ error: error.message, loading: false });\n    }\n  }\n\n  render() {\n    const message = this.state.error ? `Error: ${JSON.stringify(this.state.error)}` : 'Carregando...';\n    if (this.state.error || this.state.loading) {\n      return <NotFound message={message} showGoBackButton={this.state.error} />;\n    }\n\n    return this.state.studies ? (\n      <ConnectedViewer studies={this.state.studies} />\n    ) : (\n        <ConnectedViewerRetrieveStudyData\n          studyInstanceUids={this.state.studyInstanceUids}\n          seriesInstanceUids={this.state.seriesInstanceUids}\n          server={this.state.server}\n        />\n      );\n  }\n}\n\nconst _mapStudiesToNewFormat = studies => {\n  studyMetadataManager.purge();\n\n  /* Map studies to new format, update metadata manager? */\n  const uniqueStudyUids = new Set();\n  const updatedStudies = studies.map(study => {\n    const studyMetadata = new OHIFStudyMetadata(study, study.studyInstanceUid);\n\n    const sopClassHandlerModules = extensionManager.modules['sopClassHandlerModule'];\n    study.displaySets = study.displaySets ||\n      studyMetadata.createDisplaySets(sopClassHandlerModules);\n    studyMetadata.setDisplaySets(study.displaySets);\n\n    /* Updates WADO-RS metaDataManager */\n    updateMetaDataManager(study);\n\n    studyMetadataManager.add(studyMetadata);\n    uniqueStudyUids.add(study.studyInstanceUid);\n\n    return study;\n  });\n\n  return {\n    studies: updatedStudies,\n    studyInstanceUids: Array.from(uniqueStudyUids),\n  };\n};\n\nexport default StandaloneRouting;\n","import { connect } from 'react-redux';\nimport StandaloneRouting from '../routes/StandaloneRouting';\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateServer: server => {\n      const action = {\n        type: 'ACTIVATE_SERVER',\n        server,\n      };\n      dispatch(action);\n    },\n  };\n};\n\nconst ConnectedStandaloneRouting = connect(\n  null,\n  mapDispatchToProps\n)(StandaloneRouting);\n\nexport default ConnectedStandaloneRouting;\n","import React, { useEffect, useRef } from 'react';\nexport default function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport { metadata, studies, utils, log } from '@ohif/core';\nimport usePrevious from '../customHooks/usePrevious';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nimport { useSnackbarContext } from '@ohif/ui';\n\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\nconst { studyMetadataManager, updateMetaDataManager, makeCancelable } = utils;\n\n// Contexts\nimport AppContext from '../context/AppContext';\n\nconst _promoteToFront = (list, value, searchMethod) => {\n  let response = [...list];\n  let promoted = false;\n  const index = response.findIndex(searchMethod.bind(undefined, value));\n\n  if (index > 0) {\n    const first = response.splice(index, 1);\n    response = [...first, ...response];\n  }\n\n  if (index >= 0) {\n    promoted = true;\n  }\n\n  return {\n    promoted,\n    data: response,\n  };\n};\n\n/**\n * Promote series to front if find found equivalent on filters object\n * @param {Object} study - study reference to promote series against\n * @param {Object} [filters] - Object containing filters to be applied\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\n */\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\n  let promoted = false;\n  // Promote only if no filter should be applied\n  if (!isFilterStrategy) {\n    _sortStudyDisplaySet(study, studyMetadata);\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\n  }\n\n  return promoted;\n};\n\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\n  let promoted = false;\n  const queryParamsLength = Object.keys(filters).length;\n  const shouldPromoteToFront = queryParamsLength > 0;\n\n  if (shouldPromoteToFront) {\n    const { seriesInstanceUID } = filters;\n\n    const _seriesLookup = (valueToCompare, displaySet) => {\n      return displaySet.seriesInstanceUid === valueToCompare;\n    };\n    const promotedResponse = _promoteToFront(\n      studyMetadata.getDisplaySets(),\n      seriesInstanceUID,\n      _seriesLookup\n    );\n\n    study.displaySets = promotedResponse.data;\n    promoted = promotedResponse.promoted;\n  }\n\n  return promoted;\n};\n\n/**\n * Method to identify if query param (from url) was applied to given list\n * @param {Object} study - study reference to promote series against\n * @param {Object} [filters] - Object containing filters to be applied\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\n */\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\n  const { seriesInstanceUID } = filters;\n  let applied = true;\n  // skip in case no filter or no toast manager\n  if (!seriesInstanceUID) {\n    return applied;\n  }\n\n  const { seriesList = [], displaySets = [] } = study;\n  const firstSeries = isFilterStrategy ? seriesList[0] : displaySets[0];\n\n  if (!firstSeries || firstSeries.seriesInstanceUid !== seriesInstanceUID) {\n    applied = false;\n  }\n\n  return applied;\n};\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\n  if (queryParamApplied) {\n    return;\n  }\n\n  const { show: showUserMessage = () => { } } = dialog;\n  showUserMessage({\n    message,\n  });\n};\n\nconst _addSeriesToStudy = (studyMetadata, series) => {\n  const sopClassHandlerModules =\n    extensionManager.modules['sopClassHandlerModule'];\n  const study = studyMetadata.getData();\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\n  studyMetadata.addSeries(seriesMetadata);\n  studyMetadata.createAndAddDisplaySetsForSeries(\n    sopClassHandlerModules,\n    seriesMetadata,\n    false\n  );\n  study.displaySets = studyMetadata.getDisplaySets();\n  _updateMetaDataManager(study, series.seriesInstanceUid);\n};\n\nconst _updateMetaDataManager = (study, studyMetadata, series) => {\n  updateMetaDataManager(study, series);\n\n  const { studyInstanceUid } = study;\n\n  if (!studyMetadataManager.get(studyInstanceUid)) {\n    studyMetadataManager.add(studyMetadata);\n  }\n};\n\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\n  const sopClassHandlerModules =\n    extensionManager.modules['sopClassHandlerModule'];\n\n  if (!study.displaySets) {\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\n  }\n\n  studyMetadata.setDisplaySets(study.displaySets);\n};\n\nconst _sortStudyDisplaySet = (study, studyMetadata) => {\n  studyMetadata.sortDisplaySets(study.displaySets);\n};\nconst _loadRemainingSeries = studyMetadata => {\n  const { seriesLoader } = studyMetadata.getData();\n  if (!seriesLoader) {\n    return Promise.resolve();\n  }\n  const promisesLoaders = [];\n  while (seriesLoader.hasNext()) {\n    promisesLoaders.push(\n      seriesLoader\n        .next()\n        .then(\n          series => void _addSeriesToStudy(studyMetadata, series),\n          error => void log.error(error)\n        )\n    );\n  }\n\n  return Promise.all(promisesLoaders);\n};\n\nfunction ViewerRetrieveStudyData({\n  server,\n  studyInstanceUids,\n  seriesInstanceUids,\n  clearViewportSpecificData,\n}) {\n  // hooks\n  const [error, setError] = useState(false);\n  const [studies, setStudies] = useState([]);\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\n  const snackbarContext = useSnackbarContext();\n  const { appConfig = {} } = useContext(AppContext);\n  const { filterQueryParam: isFilterStrategy = false } = appConfig;\n\n  let cancelableSeriesPromises;\n  let cancelableStudiesPromises;\n  /**\n   * Callback method when study is totally loaded\n   * @param {object} study study loaded\n   * @param {object} studyMetadata studyMetadata for given study\n   * @param {Object} [filters] - Object containing filters to be applied\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n   */\n  const studyDidLoad = (study, studyMetadata, filters) => {\n    // User message\n    const promoted = _promoteList(\n      study,\n      studyMetadata,\n      filters,\n      isFilterStrategy\n    );\n\n    // Clear viewport to allow new promoted one to be displayed\n    if (promoted) {\n      clearViewportSpecificData(0);\n    }\n\n    const isQueryParamApplied = _isQueryParamApplied(\n      study,\n      filters,\n      isFilterStrategy\n    );\n    // Show message in case not promoted neither filtered but should to\n    _showUserMessage(\n      isQueryParamApplied,\n      'Query parameters were not applied. Using original series list for given study.',\n      snackbarContext\n    );\n\n    setStudies([...studies, study]);\n    setIsStudyLoaded(true);\n  };\n\n  /**\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\n   * @param {Array} studiesData Array of studies retrieved from server\n   * @param {Object} [filters] - Object containing filters to be applied\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n   */\n  const processStudies = (studiesData, filters) => {\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\n      // Map studies to new format, update metadata manager?\n      const studies = studiesData.map(study => {\n        const studyMetadata = new OHIFStudyMetadata(\n          study,\n          study.studyInstanceUid\n        );\n\n        _updateStudyDisplaySets(study, studyMetadata);\n        _updateMetaDataManager(study, studyMetadata);\n\n        // Attempt to load remaning series if any\n        cancelableSeriesPromises[study.studyInstanceUid] = makeCancelable(\n          _loadRemainingSeries(studyMetadata)\n        )\n          .then(result => {\n            if (result && !result.isCanceled) {\n              studyDidLoad(study, studyMetadata, filters);\n            }\n          })\n          .catch(error => {\n            if (error && !error.isCanceled) {\n              setError(true);\n              log.error(error);\n            }\n          });\n\n        return study;\n      });\n\n      setStudies(studies);\n    }\n  };\n\n  const loadStudies = async () => {\n    try {\n      const filters = {};\n      // Use the first, discard others\n      const seriesInstanceUID = seriesInstanceUids && seriesInstanceUids[0];\n\n      const retrieveParams = [server, studyInstanceUids];\n\n      if (seriesInstanceUID) {\n        filters.seriesInstanceUID = seriesInstanceUID;\n        // Query param filtering controlled by appConfig property\n        if (isFilterStrategy) {\n          retrieveParams.push(filters);\n        }\n      }\n\n      cancelableStudiesPromises[studyInstanceUids] = makeCancelable(\n        retrieveStudiesMetadata(...retrieveParams)\n      )\n        .then(result => {\n          if (result && !result.isCanceled) {\n            processStudies(result, filters);\n          }\n        })\n        .catch(error => {\n          if (error && !error.isCanceled) {\n            setError(true);\n            log.error(error);\n          }\n        });\n    } catch (error) {\n      if (error) {\n        setError(true);\n        log.error(error);\n      }\n    }\n  };\n\n  const purgeCancellablePromises = () => {\n    for (let studyInstanceUids in cancelableStudiesPromises) {\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUids]) {\n        cancelableStudiesPromises[studyInstanceUids].cancel();\n      }\n    }\n\n    for (let studyInstanceUids in cancelableSeriesPromises) {\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUids]) {\n        cancelableSeriesPromises[studyInstanceUids].cancel();\n        deleteStudyMetadataPromise(studyInstanceUids);\n        studyMetadataManager.remove(studyInstanceUids);\n      }\n    }\n  };\n\n  const prevStudyInstanceUids = usePrevious(studyInstanceUids);\n\n  useEffect(() => {\n    const hasStudyInstanceUidsChanged = !(prevStudyInstanceUids && prevStudyInstanceUids.every(e => studyInstanceUids.includes(e)));\n\n    if (hasStudyInstanceUidsChanged) {\n      studyMetadataManager.purge();\n      purgeCancellablePromises();\n    }\n  }, [studyInstanceUids]);\n\n  useEffect(() => {\n    cancelableSeriesPromises = {};\n    cancelableStudiesPromises = {};\n    loadStudies();\n\n    return () => {\n      purgeCancellablePromises();\n    };\n  }, []);\n\n  if (error) {\n    return <div>Error: {JSON.stringify(error)}</div>;\n  }\n\n  return (\n    <ConnectedViewer\n      studies={studies}\n      isStudyLoaded={isStudyLoaded}\n      studyInstanceUids={studyInstanceUids}\n    />\n  );\n}\n\nViewerRetrieveStudyData.propTypes = {\n  studyInstanceUids: PropTypes.array.isRequired,\n  seriesInstanceUids: PropTypes.array,\n  server: PropTypes.object,\n  clearViewportSpecificData: PropTypes.func.isRequired,\n};\n\nexport default ViewerRetrieveStudyData;\n","import { connect } from 'react-redux';\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\nimport OHIF from \"@ohif/core\";\n\nconst { clearViewportSpecificData } = OHIF.redux.actions;\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  return {\n    server: ownProps.server || activeServer,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerRetrieveStudyData = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerRetrieveStudyData);\n\nexport default ConnectedViewerRetrieveStudyData;\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n"],"sourceRoot":""}